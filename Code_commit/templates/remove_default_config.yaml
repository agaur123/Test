AWSTemplateFormatVersion: 2010-09-09
Description: Remove Default Configuration recorder and Delivery channel provided from AWS Control Tower.

Resources:
    LambdaIAMRole:
          Type: "AWS::IAM::Role"
          Properties:
            Path: "/lambda/servicerole/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                   - Effect: "Allow"
                     Principal:
                        Service: [lambda.amazonaws.com]
                     Action:
                        - sts:AssumeRole
            Policies:
              - PolicyName: ConfigPolicy
                PolicyDocument:
                  Version: 2012-10-17
                  Statement:
                    - Effect: Allow
                      Action: 'config:*'
                      Resource: '*'

    FunctionToRemoveConfig:
          Type: "AWS::Lambda::Function"
          Properties:
             Code:
                ZipFile: |
                  import json
                  import logging
                  import boto3
                  from botocore.vendored import requests
                  logger = logging.getLogger()
                  logger.setLevel(logging.INFO)
                  
                  SUCCESS = "SUCCESS"
                  FAILED = "FAILED"
                  
                  def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
                      responseUrl = event['ResponseURL']
                      print(responseUrl)
                      responseBody = {}
                      responseBody['Status'] = responseStatus
                      responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
                      responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
                      responseBody['StackId'] = event['StackId']
                      responseBody['RequestId'] = event['RequestId']
                      responseBody['LogicalResourceId'] = event['LogicalResourceId']
                      responseBody['NoEcho'] = noEcho
                      responseBody['Data'] = responseData
                      json_responseBody = json.dumps(responseBody)
                      print("Response body:\n" + json_responseBody)
                      headers = {
                          'content-type' : '',
                          'content-length' : str(len(json_responseBody))
                      }
                      try:
                          response = requests.put(responseUrl,
                                                  data=json_responseBody,
                                                  headers=headers)
                          print("Status code: " + response.reason)
                      except Exception as e:
                          print("send(..) failed executing requests.put(..): " + str(e))

                  def remove_config(region):
                      recorder_stopped = False
                      response = ""
                      client = boto3.client('config', region_name=region)
                      check = client.describe_configuration_recorders()
                      try:
                          for configuration in check["ConfigurationRecorders"]:
                              if configuration["name"] == 'aws-controltower-BaselineConfigRecorder':
                                  response = client.stop_configuration_recorder(ConfigurationRecorderName='aws-controltower-BaselineConfigRecorder')
                                  recorder_stopped = True
                                  print('recorder stopped')
                      except:
                          print("No configuration recorders found")

                      check = client.describe_delivery_channels()
                      try:
                          for channel in check["DeliveryChannels"]:
                              if channel['name'] == 'aws-controltower-BaselineConfigDeliveryChannel':
                                  response = client.delete_delivery_channel(DeliveryChannelName='aws-controltower-BaselineConfigDeliveryChannel')
                                  print('channel deleted')
                      except:
                          print("No delivery channels found")

                      if recorder_stopped:
                          response = client.delete_configuration_recorder(ConfigurationRecorderName='aws-controltower-BaselineConfigRecorder')
                          print('recorder deleted')
                      return response      

                  def lambda_handler (event, context):
                      regions =['us-east-1','eu-west-1','ap-southeast-2','us-east-2','us-west-2'] 
                      if event["RequestType"] == "Create":
                          for region in regions:
                              print("removing config in {0}".format(region))
                              responseData = {}
                              remove_config(region)
                              responseData['data'] = "Done"
                          send(event, context, SUCCESS, responseData)
                          return
                      else:
                          logger.info("No Data Received: ")
                          responseData = {}
                          responseData['data'] = "State Not defined"
                          send(event, context, SUCCESS, responseData)
                          return

             Description: "Remove Default config"
             Handler: index.lambda_handler
             MemorySize: 1024
             Role: !GetAtt LambdaIAMRole.Arn
             Runtime: python3.6
             Timeout: 300

    MyCustomResource:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken: !GetAtt FunctionToRemoveConfig.Arn

