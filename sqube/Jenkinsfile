@Library('flux7-lib')
import com.flux7.deploy.*
import com.flux7.utils.*

node {
  def credentialsId = 'git-ssh-key'
  def master_role = 'master-role-admin'
  def roles_dir = 'application'
  def reportPath= '/var/lib/jenkins/jobs/$JOB_NAME/workspace/application'
  
  // Checking repo
  stage("Checkout  Repo") 
  {
        checkout poll:false,
                scm: [
                        $class: 'GitSCM',
                        branches: [[ name: "${GIT_BRANCH}" ]],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${roles_dir}" ]],
                        userRemoteConfigs: [[ url: "${GIT_URL}", credentialsId: credentialsId ]]
                ]
  }
  
  // Generating Coverage
  stage("Generate Coverage report")
  {
   
     try
     {
         sh """
         /usr/local/bin/virtualenv venv
         source venv/bin/activate
         pip install -r ${reportPath}/python_lib/requirements.txt
         pip install pytest-cov
         pytest --cov-report xml:${reportPath}/coverage.xml --cov=${reportPath}/python_lib/flux7 ${reportPath}/python_lib/flux7/tests/
         rm -rf venv
         """    
     }
     catch(exc)
     {
            echo "error in coverage"
     }
  }
  
  stage('SonarQube analysis') 
  {
    // requires SonarQube Scanner 2.8+
        def scannerHome = tool 'sonarqube scanner';
        withSonarQubeEnv('') 
        {
           sh "${scannerHome}/bin/sonar-scanner " + 
            '-Dsonar.projectKey=$SONAR_PROJECT_NAME ' + 
            '-Dsonar.projectName=$SONAR_PROJECT_NAME ' + 
            '-Dsonar.projectVersion=1.0 ' +
            '-Dsonar.sources=/var/lib/jenkins/jobs/$JOB_NAME/workspace/${roles_dir} '+
            '-Dsonar.projectBaseDir=/var/lib/jenkins/jobs/$JOB_NAME/workspace/application '+
            '-Dsonar.sourceEncoding=UTF-8 '+
            '-Dsonar.python.coverage.reportPaths=${pathReport}/coverage.xml'
            '-Dsonar.analysis.*'
         }
    }
    
}
 
